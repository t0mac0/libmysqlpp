<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
    "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<!-- $Id: tutorial.docbook 1339 2010-02-11 09:02:56Z vaclavslavik $ -->

<chapter id="ch.tutorial">
  <title>Tutorial</title>

  <section id="sec.helloworld">
    <title>Hello, world</title>

    <para>
      By far the simplest way to generate makefiles using Bakefile is
      to use so-called <link linkend="concept.preset">presets</link>
      which are prepared skeletons of bakefiles that get you
      started quickly. Let's see how it works on an example of
      the famous <emphasis>Hello, world</emphasis> program written
      in C and implemented in the <filename>hello.c</filename> file:
      <programlisting><![CDATA[
#include <stdio.h>

int main()
{
  printf("Hello, world!\n");
  return 0;
}
]]></programlisting>
    </para>
    <para>
      The bakefile needed to compile it,<filename>hello.bkl</filename>,
      looks like this:
      <programlisting><![CDATA[
<?xml version="1.0"?>
<makefile>

  <include file="presets/simple.bkl"/>
  
  <exe id="hello" template="simple">
    <sources>hello.c</sources>
  </exe>

</makefile>
]]></programlisting>
    </para>
    <para>
      Presets are included using the <xref linkend="cmd.include"/>
      directive. The structure of the file name is always the same:
      <filename>presets/NAME-OF-PRESET.bkl</filename>. In general,
      you can combine several presets, but in practice you must
      be careful when doing so. It's always a good idea to read
      the code for the preset before using it.  The "simple"
      preset we include here defines a <varname>DEBUG</varname>
      <link linkend="concept.option">option</link> and a
      <link linkend="concept.template">template</link> called
      <literal>simple</literal>. Generated makefiles will allow the
      user to build all targets that are based on this template as
      either debug or release build.
    </para>
    <para>
      Let's generate some makefiles now. The <command>bakefile</command>
      command is used to do it. For example:
    </para>
    <para>
      <prompt>$ </prompt>
      <userinput>bakefile -f msvc hello.bkl</userinput>
    </para>
    <para>
      That's all.
      This will creates VC++ makefile <filename>makefile.vc</filename>. Of
      course, you can change the name of output file if you don't like the
      default:
    </para>
    <para>
      <prompt>$ </prompt>
      <userinput>bakefile -f msvc -o makefile hello.bkl</userinput>
    </para>
    <para>
      Bakefile will also generate the <filename>Makefile.in</filename> files
      used by 
      <ulink url="http://www.gnu.org/software/autoconf/">Autoconf</ulink>:
    </para>
    <para>
      <prompt>$ </prompt>
      <userinput>bakefile -f autoconf hello.bkl</userinput>
    </para>
    <para>
  	  These are templates for makefiles. Autoconf also requires
      a <filename>configure.ac</filename> script (previously,
  	  <filename>configure.in</filename>), but Bakefile will not
  	  generate this for you. This script checks for platform
      features necessary to build the program; see the autoconf
  	  manual for details.
    </para>
    <para>
      When producing autoconf format output, Bakefile will also generate a file
      called <filename>autoconf_inc.m4</filename> which defines macros needed
      by the generated Makefile.in files. To use this, call the
      <literal>AC_BAKEFILE</literal> macro within your
	    <filename>configure.ac</filename> script.
  	</para>
  	<para>
  	  A minimal <filename>configure.ac</filename> script for our
  	  example program would look like this:
      <programlisting><![CDATA[
AC_PREREQ(2.53)
AC_INIT([hello], [1.0], [author@example.com])
dnl pass some unique file file to AC_CONFIG_SRCDIR
AC_CONFIG_SRCDIR([autoconf_inc.m4])
AC_CANONICAL_HOST
DEBUG=0
AC_BAKEFILE([m4_include(autoconf_inc.m4)])
AC_CONFIG_FILES([Makefile])
AC_OUTPUT
]]></programlisting>
    </para>
    <para>
      Note the part that sets the <varname>DEBUG</varname> variable. Any
	    options declared in your bakefile must be set to some default
  	  value before calling <literal>AC_BAKEFILE</literal>. The
  	  simple.bkl preset defines the <varname>DEBUG</varname> option,
  	  so we have to give it a default value here.
	  </para>

  	<para>
      While the above code will work, there's a better way to handle the
  	  debug option:
      <programlisting><![CDATA[
AC_PREREQ(2.53)
AC_INIT([hello], [1.0], [author@example.com])
dnl pass some unique file file to AC_CONFIG_SRCDIR
AC_CONFIG_SRCDIR([autoconf_inc.m4])
AC_CANONICAL_HOST

AC_ARG_ENABLE(debug,
              [  --enable-debug          Enable debugging information],
              USE_DEBUG="$enableval", USE_DEBUG="no")

if test $USE_DEBUG = yes ; then 
  DEBUG=1
  dnl Bakefile doesn't touch {C,CPP,CXX,LD}FLAGS in autoconf format, we
  dnl have to do it ourselves. This will work with many compilers
  dnl (but not all, proper configure script would check if the compiler
  dnl supports it):
  CFLAGS="$CFLAGS -g"
else
  DEBUG=0
fi

AC_BAKEFILE([m4_include(autoconf_inc.m4)])
AC_CONFIG_FILES([Makefile])
AC_OUTPUT
]]></programlisting>
    </para>

    <para>
      You are ready to generate Autoconf's <filename>configure</filename>
      script now:
    </para>
    <para>
      <prompt>$ </prompt>
      <userinput>
        bakefilize --copy &amp;&amp; aclocal &amp;&amp; autoconf
      </userinput>
    </para>

  </section>

</chapter>
