<?xml version="1.0" ?>
<!--

  This file is part of Bakefile (http://www.bakefile.org)

  Copyright (C) 2003-2007 Vaclav Slavik

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to
  deal in the Software without restriction, including without limitation the
  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  sell copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.

  $Id: format_features.bkl 1020 2007-03-05 13:52:29Z vaclavslavik $

  This is a helper file that declares variables that describe optional format
  backend features. All features are set to meaningful defaults here and format
  files such as autoconf.bkl must override the setting if they want to take
  advantage of a particular feature.
  
-->
<makefile>

    <!--
    This boolean flag indicates whether the output format supports variables.
    If it does, then some space and time optimization are possible and long
    Bakefile variables that would otherwise be expanded into literals are left
    as variables in generated makefile/project.
    
    Makefiles generally do, that's why makefile.bkl sets this to 1.
    -->
    <set var="FORMAT_HAS_VARIABLES">0</set>

    
    <!--
    Whitespace separated list of variables (both global and target) used by
    output writer. Output Empy template then can only use variables from this
    list.  This does not affect conditional or make variables or options - they
    are always all available.  

    This list can be used to speed up finalization phase of Bakefile processing
    and it improves efficiency of unused variables purging as well.
    
    If the list is empty then all variables are treated as used by the writer.
    -->
    <set var="FORMAT_OUTPUT_VARIABLES"></set>

    
    <!--
    Whether the output format can handle conditions (i.e. variable values
    depending on conditions and conditionally built targets) at all. Most
    make-tools do, but e.g. MSVC project files can't do it. If set to 0, then
    the targets and variables are "flattened" = expanded into multiple
    'configurations' as in many IDEs.
    -->
    <set var="FORMAT_SUPPORTS_CONDITIONS">1</set>

    <!--
    Whether it is at least possible to have multiple configurations if
    conditions are not supported (such as in IDEs). Meaningless if
    FORMAT_SUPPORTS_CONDITIONS=1. If both FORMAT_SUPPORTS_CONDITIONS and
    FORMAT_SUPPORTS_CONFIGURATIONS are 0, then we're in deep trouble and
    we can only generate makefiles that are not configurable.
    -->
    <set var="FORMAT_SUPPORTS_CONFIGURATIONS">1</set>


    <!--
    Whether the output format can handle <action>s at all.
    Most make-tools do, but IDE project files typically don't.
    -->
    <set var="FORMAT_SUPPORTS_ACTIONS">1</set>


    <!--
    Whether the output format can handle <subproject>s at all.
    Most make-tools do, but IDE project files typically don't.
    -->
    <set var="FORMAT_SUPPORTS_SUBPROJECTS">1</set>


    <!--
    Whether the output format needs to have options that are used by
    conditions listed in the output file. This is true in majority of cases
    because the conditions take form such as "!if $(OPT) == value" and OPT must
    be defined, but there's one exception: autoconf. It decides on whether
    the condition is true or false in autoconf_inc.m4 and Makefile.in does not
    need the variables, so we can safely purge them and save some space.

    Set to 1 by default, only autoconf overwrites the setting.
    -->
    <set var="FORMAT_NEEDS_OPTION_VALUES_FOR_CONDITIONS">1</set>


    <!--
    Set to 1 if it makes sense to create "make (un)install" target in this
    format. Unix makefiles do, the rest usually doesn't.
    -->
    <set var="FORMAT_HAS_MAKE_INSTALL">0</set>


</makefile>

